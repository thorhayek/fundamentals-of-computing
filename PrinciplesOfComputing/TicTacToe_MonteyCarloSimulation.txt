"""
Monte Carlo Tic-Tac-Toe Player
"""

import random
import poc_ttt_gui
import poc_ttt_provided as provided

# Constants for Monte Carlo simulator
# You may change the values of these constants as desired, but
#  do not change their names.
NTRIALS = 100       # Number of trials to run
SCORE_CURRENT = 2.0 # Score for squares played by the current player
SCORE_OTHER= 1.0   # Score for squares played by the other player
DIMENSIONS = 3   
MACHINE_PLAYER = provided.PLAYERX

# Add your functions here.

def mc_trial(board, player):
    
    """
    This function takes a current board and
    the next player to move. The function should
    play a game starting with the given player by 
    making random moves, alternating between players. 
    The function should return when the game is over. 
    The modified board will contain the state of the game, 
    so the function does not return anything.
    In other words, the function should modify 
    the board input
    """
   
    while not board.check_win():
        # choose empty cell
        cell_tup = random.choice(board.get_empty_squares())
        # move
        board.move(cell_tup[0],cell_tup[1],player)
        # switch players
        player = provided.switch_player(player)
        
        
def mc_update_scores(scores, board, player):
    
    """
    This function takes a grid of scores
    (a list of lists) with the same dimensions
    as the Tic-Tac-Toe board,
    a board from a completed game,
    and which player the machine player is. 
    The function should score the completed board
    and update the scores grid.
    As the function updates the scores grid directly,
    it does not return anything,
    """
    
    # find out who won 
    result = board.check_win()
    if result == None:
        print "No score updated, game is still in progress"
    elif result == provided.DRAW:
        return
    elif result == player:
        # curr player won
        c_square = SCORE_CURRENT
        o_square = -SCORE_OTHER
    else:
        # curr player lost
        c_square = -SCORE_CURRENT
        o_square = SCORE_OTHER
    
    dim = board.get_dim()
    for row in range(dim):
            for col in range(dim):
                square_val = board.square(row,col)
                if(square_val==player):
                    scores[row][col] += c_square
                elif(square_val==provided.EMPTY):
                    scores[row][col] += 0
                else:
                    #if(o_square < 0):
                        #print "beofre",scores[row][col]
                    scores[row][col] += o_square
                    #if(o_square < 0):
                        #print "after",scores[row][col]
                    
                    
        

def get_best_move(board, scores):
    
    """
    This function takes a current board
    and a grid of scores.
    The function should find all of the
    empty squares with the maximum score
    and randomly return one of them as a
    (row, column) tuple. 
    It is an error to call this function
    with a board that has no empty squares
    (there is no possible next move),
    so your function may do whatever it
    wants in that case. The case where
    the board is full will not be tested.
    """
    
    empty = board.get_empty_squares()
    best_score = max(scores[row][col] for row, col in empty)
    best_score_pos = [(row, col) for row, col in empty
                      if scores[row][col] == best_score]
    return random.choice(best_score_pos)

def mc_move(board, player, trials):
    """
    This function takes a current board,
    which player the machine player is,
    and the number of trials to run. 
    The function should use the Monte Carlo
    simulation described above to return
    a move for the machine player in the form
    of a (row, column) tuple.
    Be sure to use the other functions you have written!
    """
    dim = board.get_dim()
    scores = [ [0 for _ in range(dim)] for _ in range(dim)] 
    #print player, " 3 = 0 , 2 =x"
    #print board
    for _ in range(trials):
        board_clone = board.clone()
        mc_trial(board_clone,player)
        mc_update_scores(scores, board_clone, player)
    tup = get_best_move(board, scores)
    #print tup
    return tup
        

# Test game with the console or the GUI.  Uncomment whichever 
# you prefer.  Both should be commented out when you submit 
# for testing to save time.
#mc_move(provided.TTTBoard(3, False, [[provided.PLAYERX, provided.EMPTY, provided.EMPTY], [provided.PLAYERO, provided.PLAYERO, provided.EMPTY], [provided.EMPTY, provided.PLAYERX, provided.EMPTY]]), provided.PLAYERX, NTRIALS) 
#returned mostly bad moves: [(0, 2), (0, 2), (0, 2), (0, 2), (0, 2)]
#mc_move(provided.TTTBoard(3, False, [[provided.PLAYERX, provided.PLAYERX, provided.PLAYERO], [provided.EMPTY, provided.PLAYERX, provided.PLAYERX], [provided.PLAYERO, provided.EMPTY, provided.PLAYERO]]), provided.PLAYERO, NTRIALS) 
#returned mostly bad moves: [(1, 0), (1, 0), (1, 0), (2, 1), (1, 0)]

#mc_move(provided.TTTBoard(3, False, [[provided.PLAYERX, provided.EMPTY, provided.EMPTY], [provided.PLAYERO, provided.PLAYERO, provided.EMPTY], [provided.EMPTY, provided.PLAYERX, provided.EMPTY]]), provided.PLAYERX, NTRIALS) 
#returned mostly bad moves: [(2, 0), (2, 2), (2, 2), (1, 2), (2, 2)]
#mc_move(provided.TTTBoard(3, False, [[provided.EMPTY, provided.PLAYERX, provided.EMPTY], [provided.PLAYERO, provided.PLAYERX, provided.EMPTY], [provided.PLAYERO, provided.EMPTY, provided.EMPTY]]), provided.PLAYERO, NTRIALS) 
#returned mostly bad moves: [(2, 2), (1, 2), (1, 2), (1, 2), (2, 2)]
#mc_move(provided.TTTBoard(3, False, [[provided.PLAYERX, provided.PLAYERX, provided.PLAYERO], [provided.EMPTY, provided.PLAYERX, provided.PLAYERX], [provided.PLAYERO, provided.EMPTY, provided.PLAYERO]]), provided.PLAYERO, NTRIALS) 
#provided.play_game(mc_move, NTRIALS, False)        
#poc_ttt_gui.run_gui(DIMENSIONS, MACHINE_PLAYER, mc_move, NTRIALS, False)
