"""
Cookie Clicker Simulator
"""

import simpleplot
import math

# Used to increase the timeout, if necessary
import codeskulptor
codeskulptor.set_timeout(50)

import poc_clicker_provided as provided

# Constants
SIM_TIME = 10000000000.0

class ClickerState:
    """
    Simple class to keep track of the game state.
    """
    
    def __init__(self):
       
        """ init the state variables """
        self._total_cookies = 0.0
        self._current_cookies = 0.0
        self._current_time = 0.0
        self._cps = 1.0
        #this._upgrade_cps = 0.0
        self._history = [(0.0, None, 0.0, 0.0)]
        
    def __str__(self):
        """
        Return human readable state
        """
        click_state_str = "\n total cookies: "+ str(self._total_cookies)+ "\n current cookies: "+ str(self._current_cookies)+"\n current time: "+ str(self._current_time)+"\n cps: "+ str(self._cps)
        return click_state_str
        
    def get_cookies(self):
        """
        Return current number of cookies 
        (not total number of cookies)
        
        Should return a float
        """
        
        return self._current_cookies
    
    def get_total_cookies(self):
        """
        Return total number of cookies 
        
        Should return a float
        """
        
        return self._total_cookies
    
    def get_cps(self):
        """
        Get current CPS

        Should return a float
        """
        
        return self._cps
    
    def get_time(self):
        """
        Get current time

        Should return a float
        """
        
        return self._current_time
    
    def get_history(self):
        """
        Return history list

        History list should be a list of tuples of the form:
        (time, item, cost of item, total cookies)

        For example: [(0.0, None, 0.0, 0.0)]

        Should return a copy of any internal data structures,
        so that they will not be modified outside of the class.
        """
        
        return self._history

    def time_until(self, cookies):
        """
        Return time until you have the given number of cookies
        (could be 0.0 if you already have enough cookies)

        Should return a float with no fractional part
        """
        
        #print "cookies required", cookies
        if( self.get_cookies() >= cookies):
            return 0.0
        else:
            cookie_diff= cookies - self.get_cookies()
            return  math.ceil(cookie_diff/self.get_cps())
        
    def wait(self, time):
        """
        Wait for given amount of time and update state

        Should do nothing if time <= 0.0
        """
        if(time <= 0.0):
#            cookies_gen = self.get_cps()
#        	print "cookies gen",cookies_gen
#        	self._current_cookies += cookies_gen
#        	self._total_cookies += cookies_gen
            return
        self._current_time += time
        #print self.get_cps(), time
        cookies_gen = time*self.get_cps()
        #print "cookies gen",cookies_gen
        self._current_cookies += cookies_gen
        self._total_cookies += cookies_gen
    
    def buy_item(self, item_name, cost, additional_cps):
        """
        Buy an item and update state

        Should do nothing if you cannot afford the item
        """
        
        if(self.get_cookies() < cost):
            return  
        self._current_cookies -= cost
        self._cps += additional_cps
        self._history.append((self.get_time(), item_name, cost, self.get_total_cookies()))
   
    
def simulate_clicker(build_info, duration, strategy):
    """
    Function to run a Cookie Clicker game for the given
    duration with the given strategy.  Returns a ClickerState
    object corresponding to the final state of the game.
    """
    
    # make a clone of the build_info object & create a new ClickerState object
    cloned_build_info = build_info.clone()
    new_click = ClickerState()

    while 0 <= duration:
        
        item = strategy(new_click.get_cookies(), new_click.get_cps(),new_click.get_history(), 
                        duration, cloned_build_info)
        if item is None:
            # no resources, no purchase
            break
        item_cost = cloned_build_info.get_cost(item)
        wait_time = new_click.time_until(item_cost)
        if duration < wait_time:
            # impossible, cant wait until after the duration
            break
        else:
            duration -= wait_time
            new_click.wait(wait_time)
            new_click.buy_item(item, item_cost, cloned_build_info.get_cps(item))
            cloned_build_info.update_item(item)
    # if there is still time left, allow cookies to accumulate till the end
    new_click.wait(duration)          
    return new_click


def strategy_cursor_broken(cookies, cps, history, time_left, build_info):
    """
    Always pick Cursor!

    Note that this simplistic (and broken) strategy does not properly
    check whether it can actually buy a Cursor in the time left.  Your
    simulate_clicker function must be able to deal with such broken
    strategies.  Further, your strategy functions must correctly check
    if you can buy the item in the time left and return None if you
    can't.
    """
    return "Cursor"

def strategy_none(cookies, cps, history, time_left, build_info):
    """
    Always return None

    This is a pointless strategy that will never buy anything, but
    that you can use to help debug your simulate_clicker function.
    """
    return None

def strategy_cheap(cookies, cps, history, time_left, build_info):
    """
    Always buy the cheapest item you can afford in the time left.
    """
    min_cost = float('inf')
    min_item = None
    expected_cookies = cookies + (time_left * cps)
    for item in build_info.build_items():
        item_cost = build_info.get_cost(item)
        if( item_cost <= expected_cookies and item_cost < min_cost):
            min_cost = item_cost
            min_item = item
    return min_item   

def strategy_expensive(cookies, cps, history, time_left, build_info):
    """
    Always buy the most expensive item you can afford in the time left.
    """
    max_cost = -float('inf')
    max_item = None
    expected_cookies = cookies + (time_left * cps)
    for item in build_info.build_items():
        item_cost = build_info.get_cost(item)
        if( item_cost <= expected_cookies and item_cost > max_cost):
            max_cost = item_cost
            max_item = item
    return max_item 

def strategy_best(cookies, cps, history, time_left, build_info):
    """
    The best strategy that you are able to implement.
    """
    # failed approach 
    # determines whether the current item which item will give
    # largest number of cookies in the future
#    max_cookies = 0 
#    best_item = None
#    expected_cookies = cookies + (time_left * cps)
#    for item in build_info.build_items():
#        item_cost = build_info.get_cost(item)
#        if(item_cost < cookies):
#            wait_time = 0
#        else:
#            wait_time = (item_cost-cookies)/cps
#        if wait_time > time_left:
#            continue 
#        item_cps = build_info.get_cps(item)
#        new_cps = item_cps + cps
#        num_cookies_future = (time_left - wait_time) * new_cps
#        
#        if(wait_time == 0 ):
#            total_cookies =  cookies + num_cookies_future 
#        else:
#            total_cookies =  cookies +(item_cost - cookies)+  num_cookies_future
#        
#        if( max_cookies < total_cookies):
#            max_cookies = total_cookies
#            best_item = item
#    return best_item 

    item_lst = build_info.build_items() 
    cost_lst = map(build_info.get_cost, item_lst) 
    cps_lst = map(build_info.get_cps, item_lst) 
    eff_lst = [ x/y for x,y in zip(cps_lst,cost_lst)] 
    most_eff_idx = eff_lst.index(max(eff_lst)) 
    most_eff_item = item_lst[most_eff_idx]  
    return most_eff_item 

        
def run_strategy(strategy_name, time, strategy):
    """
    Run a simulation for the given time with one strategy.
    """
    state = simulate_clicker(provided.BuildInfo(), time, strategy)
    print strategy_name, ":", state

    # Plot total cookies over time

    # Uncomment out the lines below to see a plot of total cookies vs. time
    # Be sure to allow popups, if you do want to see it

    # history = state.get_history()
    # history = [(item[0], item[3]) for item in history]
    # simpleplot.plot_lines(strategy_name, 1000, 400, 'Time', 'Total Cookies', [history], True)

def run():
    """
    Run the simulator.
    """    
    run_strategy("Cursor", SIM_TIME, strategy_best)

    # Add calls to run_strategy to run additional strategies
    # run_strategy("Cheap", SIM_TIME, strategy_cheap)
    # run_strategy("Expensive", SIM_TIME, strategy_expensive)
    # run_strategy("Best", SIM_TIME, strategy_best)
    
run()