"""
Planner for Yahtzee
Simplifications:  only allow discard and roll, only score against upper level
"""

# Used to increase the timeout, if necessary
import codeskulptor
codeskulptor.set_timeout(20)

import random
def gen_all_sequences(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """
    
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                temp_set.add(tuple(new_sequence))
        answer_set = temp_set
    return answer_set


def score(hand):
    """
    Compute the maximal score for a Yahtzee hand according to the
    upper section of the Yahtzee score card.

    hand: full yahtzee hand

    Returns an integer score 
    """
    old_max = -float('Inf')
    new_max = 0
    prev_die = None
    for die_val in hand:
        
        if(prev_die):
            if(prev_die != die_val):
                if(old_max < new_max):
                    old_max = new_max
                new_max = die_val       
            else:
                new_max += die_val
        else:
            new_max = die_val
        prev_die = die_val
    return max(old_max,new_max)

def expected_value(held_dice, num_die_sides, num_free_dice):
    """
    Compute the expected value based on held_dice given that there
    are num_free_dice to be rolled, each with num_die_sides.

    held_dice: dice that you will hold
    num_die_sides: number of sides on each die
    num_free_dice: number of dice to be rolled

    Returns a floating point expected value
    """
    
    outcomes = [idx+1 for idx in range(num_die_sides)]
    num_rolls = num_free_dice
    all_seq = gen_all_sequences(outcomes,num_rolls)
    total_seq = len(all_seq)
    expected_sum = 0 
    for hand in all_seq:
        new_hand = sorted(held_dice+hand)
        local_score=score(new_hand)
        expected_sum += local_score
    expected_val = float(expected_sum)/total_seq 
    #score_held = score(held_dice)
    return expected_val


def gen_all_holds(hand):
    """
    Generate all possible choices of dice from hand to hold.

    hand: full yahtzee hand

    Returns a set of tuples, where each tuple is dice to hold
    """
    answer_set = set([()])
    
    for idx in range(len(hand)):
        temp_set = set()
        for partial_sequence in answer_set:
            new_sequence = list(partial_sequence)
            new_sequence.append(hand[idx])
            temp_set.add(tuple(new_sequence))
        answer_set.update(temp_set)

    return answer_set



def strategy(hand, num_die_sides):
    """
    Compute the hold that maximizes the expected value when the
    discarded dice are rolled.

    hand: full yahtzee hand
    num_die_sides: number of sides on each die
    
    Returns a tuple where the first element is the expected score and
    the second element is a tuple of the dice to hold
    """
    hand_len = len(hand)
    all_holds = gen_all_holds(hand)
    holds_max_expected = []
    max_expected = -float('Inf')
    for one_hold in all_holds:
        hold_len = len(one_hold)
        exp_value =expected_value(one_hold,num_die_sides,hand_len-hold_len)
        if(exp_value > max_expected):
            #print expected,one_hold
            max_expected = exp_value
            holds_max_expected = [one_hold]
        elif(exp_value == max_expected):
            holds_max_expected.append(one_hold)
    rand_hold = random.choice(holds_max_expected)
    #print holds_max_expected
    return (max_expected,rand_hold)


#def run_example():
#    """
#    Compute the dice to hold and expected score for an example hand
#    """
#    num_die_sides = 6
#    #hand = (1, 1, 1, 5, 6)
#    hand1 =(3, 3, 3, 5,6)
#    hand_score, hold = strategy(hand1, num_die_sides)
    #print "Best strategy for hand", hand1, "is to hold", hold, "with expected score", hand_score
    
    
#run_example()
#print gen_all_holds((1,2,3))
#print expected_value((2, 2), 6, 2)
import user40_GGStpt8Qq2_7 as poc_holds_testsuite
poc_holds_testsuite.run_score_suite(score)
poc_holds_testsuite.run_suite(gen_all_holds)
poc_holds_testsuite.run_expected_value_suite(expected_value)
                                       
    
    
    



